name: "Terraform - Staging"
# https://gaunacode.com/deploying-terraform-at-scale-with-github-actions
on:
  push:
    branches:
    - prod
    paths:
    - staging/**

  pull_request:
    branches:
    - prod
    paths: 
    - staging/**

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: staging
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN:  ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: true

      - name: Terraform fmt
        id: fmt
        run: terraform fmt 
        continue-on-error: true
        working-directory: ./staging


      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./staging

           
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./staging

    
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color
        working-directory: ./staging # Use your environment folder
        continue-on-error: true

      - name: Get result
        run: echo "${{ steps.validate.outputs.stdout }}"
          
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
           <details><summary>Validation Output</summary>
                \`\`\`\n
           ${{ steps.validate.outputs.stdout }}
           \`\`\`

           </details>

           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

           <details><summary>Show Plan</summary>

           \`\`\`\n
           ${process.env.PLAN}
           \`\`\`

           </details>

           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

           github.rest.issues.createComment({
           issue_number: context.issue.number,
           owner: context.repo.owner,
           repo: context.repo.repo,
           body: output
           })
           
      - name: Terraform Apply
        if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        working-directory: ./staging # Use your environment folder
        shell: bash
        
